# Article about caching docker builds in GitHub Actions
# ref: https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
# ref: https://github.com/dtinth/github-actions-docker-layer-caching-poc/blob/master/.github/workflows/dockerimage.yml

name: Continuous Integration
on: push
jobs:
    apis:
        strategy:
            matrix:
                api: [fastapi, quart, tornado]
        runs-on: ubuntu-latest
        name: ${{ matrix.api }} Project
        env:
            APP_NAME: ${{ matrix.api }}_api
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: |
                      ~/.cache/pip
                      ~/.cache/pypoetry/cache
                  key: pip-poetry-cache-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      pip-poetry-cache-
            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Testing
              run: |
                  python -m pip install --upgrade pip
                  pip install poetry
                  poetry install
                  poetry run make test
              working-directory: backend/$APP_NAME

    lint:
        runs-on: ubuntu-latest
        name: Lint Backend Projects
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2
            - uses: actions/cache@v2
              with:
                  path: |
                      ~/.cache/pip
                      ~/.cache/pypoetry/cache
                  key: pip-poetry-cache-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      pip-poetry-cache-
            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Linting
              run: |
                  python -m pip install --upgrade pip
                  pip install poetry
                  poetry install
                  poetry run make check
              working-directory: backend

    test-server:
        runs-on: ubuntu-latest
        name: Server Smoke Test
        needs: [apis, lint]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - uses: actions/cache@v2
              with:
                  path: |
                      ~/.cache/pip
                      ~/.cache/pypoetry/cache
                  key: pip-poetry-cache-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      pip-poetry-cache-
             - name: Test Server
              working-directory: server
              run: |
                  python -m pip install --upgrade pip
                  pip install poetry
                  echo -e 'ENV=production\nDEFAULT_BACKEND_API=fastapi_api\n' > .env
                  poetry install
                  poetry run make test
